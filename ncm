#!/usr/bin/env bash
#
# Neovim Config Manager
#
# Author: @trimclain
# License: MIT

# shellcheck disable=SC2155,SC2164
# Disabled:
# "Declare and assign separately to avoid masking return values":
#  https://www.shellcheck.net/wiki/SC2155
# "Use 'pushd ... || exit' or 'pushd ... || exit' in case pushd fails":
#  https://www.shellcheck.net/wiki/SC2164

readonly NCM_DIR="${XDG_DATA_HOME:-$HOME/.local/share}/ncm"
readonly CONFIG_DIR="${XDG_CONFIG_HOME:-$HOME/.config}"
readonly INSTALLED_CONFIGS_DB="$NCM_DIR/.nvim_configs"

readonly BLUE="\033[1;34m"
readonly GREEN="\033[1;32m"
readonly RED="\e[1;31m"
readonly RESET="\033[0m"

info() {
    printf "%b\n" "$1"
}

confirm() {
    printf "${GREEN}%b${RESET}\n" "$1"
}

alert() {
    printf "${RED}%b${RESET}\n" "$1"
}

error() {
    alert "$1" >&2
    return 1
}

ensure_installed() {
    if ! command -v "$1" > /dev/null; then
        error "Dependency $1 is not installed on your system."
    fi
}

display_help() {
    echo "Usage: ncm [command] [configname]

COMMANDS:
    h, help     Show this help message
    a, add      Add new config
    u, use      Start neovim with a config
    d, del      Delete config
    l, list     List installed configs
    update      Update ncm
    update all  Update ncm and installed configs"
}

print_configs() {
    if [[ ! -s $INSTALLED_CONFIGS_DB ]]; then
        info "Database is empty"
    else
        info "Installed Neovim Configs:\n"
        cat "$INSTALLED_CONFIGS_DB"
    fi
}

add_config() {
    [[ -z $1 ]] && error "No config given"
    [[ -d $1 ]] || error "$1 is not a directory"

    local confname=$(basename "$1")
    if grep -qx "$confname" "$INSTALLED_CONFIGS_DB"; then
        error "Config $confname is already in the database"
    fi

    # config needs to be in $CONFIG_DIR for $NVIM_APPNAME to work
    if [[ ! -d "$CONFIG_DIR/$confname" ]]; then
        echo -n "Copying $1 to ~/.config/...   "
        cp -r "$1" ~/.config/
        confirm "Done"
    fi

    echo -n "Adding $confname to the database...      "
    echo "$confname" >> "$INSTALLED_CONFIGS_DB"
    confirm "Done"
}

delete_config() {
    [[ -z $1 ]] && error "No config given" && return 1

    if ! grep -qx "$1" "$INSTALLED_CONFIGS_DB"; then
        error "Config $1 is not in the database"
    fi

    local data_paths=(
        "$CONFIG_DIR/$1"
        "${XDG_DATA_HOME:-$HOME/.local/share}/$1"
        "${XDG_STATE_HOME:-$HOME/.local/state}/$1"
        "${XDG_CACHE_HOME:-$HOME/.cache}/$1"
    )
    for dir in "${data_paths[@]}"; do
        echo -n "Deleting $dir... "
        rm -rf "$dir"
        confirm "Done"
    done

    echo -n "Deleting $1 from the list... "
    sed -i "/$1/d" "$INSTALLED_CONFIGS_DB"
    confirm "Done"
}

use_config() {
    ensure_installed nvim
    ensure_installed fzf

    if [[ ! -s $INSTALLED_CONFIGS_DB ]]; then
        error "Neovim configs database is empty"
    fi

    # check if $1 is in the list
    if [[ -n $1 ]] && ! grep -qx "$1" "$INSTALLED_CONFIGS_DB"; then
        error "config $1 is not in the database"
    fi

    if [[ -n $1 ]] && [[ -d ~/.config/$1 ]]; then
        NVIM_APPNAME=$1 nvim
    else
        local chosen_config=$(
            fzf \
                --cycle \
                --bind 'tab:toggle-down,btab:toggle-up' \
                --prompt "Use: " \
                --height=25% \
                --layout=reverse \
                --border \
                < "$INSTALLED_CONFIGS_DB"
        )
        if [[ -n $chosen_config ]]; then
            NVIM_APPNAME=$chosen_config nvim
        fi
    fi
}

update_ncm() {
    echo -n -e "${BLUE}Updating ncm... ${RESET}"
    git -C "$NCM_DIR" pull &> /dev/null
    confirm "Done"
}

update_installed_configs() {
    # || part ensures the loop processes the last line,
    # even if it doesn't end with a newline
    while IFS="" read -r config_name || [ -n "$config_name" ]; do
        local config_path="$HOME/.config/$config_name"
        if git -C "$config_path" rev-parse --is-inside-work-tree &> /dev/null; then
            echo -n -e "${BLUE}Updating $config_name config... ${RESET}"
            git -C "$config_path" pull &> /dev/null
            confirm "Done"
        fi
    done < "$INSTALLED_CONFIGS_DB"
}

main() {
    [[ -f $INSTALLED_CONFIGS_DB ]] || touch "$INSTALLED_CONFIGS_DB"

    if [ -n "$1" ]; then

        if [[ $1 == "help" ]] || [[ $1 == "h" ]] || [[ $1 == "--help" ]]; then
            display_help

        elif [[ $1 == "add" ]] || [[ $1 == "a" ]]; then
            add_config "$2"

        elif [[ $1 == "del" ]] || [[ $1 == "d" ]] || [[ $1 == "rm" ]]; then
            delete_config "$2"

        elif [[ $1 == "use" ]] || [[ $1 == "u" ]]; then
            use_config "$2"

        elif [[ $1 == "list" ]] || [[ $1 == "l" ]] || [[ $1 == "ls" ]]; then
            print_configs

        elif [[ $1 == "update" ]]; then
            update_ncm
            if [[ $2 == "all" ]]; then
                update_installed_configs
            fi

        else
            error "unknown command"
        fi

    else
        use_config
    fi
}

main "$@"
